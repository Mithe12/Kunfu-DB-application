/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kunfuclub.Interface;

import java.util.List;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import kunfuclub.DbClass.ClassAttendance.attendance;
import kunfuclub.DbClass.ClassAttendance.attendanceDao;
import kunfuclub.DbClass.ClassAttendance.attendanceDaoImp;
import kunfuclub.DbClass.Parents.parent_info;
import kunfuclub.DbClass.Parents.parent_infoDao;
import kunfuclub.DbClass.Parents.parent_infoDaoImp;
import kunfuclub.DbClass.Rank.Progress;
import kunfuclub.DbClass.Rank.ProgressDao;
import kunfuclub.DbClass.Rank.ProgressDaoImp;
import kunfuclub.DbClass.Student.history;
import kunfuclub.DbClass.Student.historyDao;
import kunfuclub.DbClass.Student.historyDaoImp;
import kunfuclub.DbClass.Student.student_info;
import kunfuclub.DbClass.Student.student_infoDao;
import kunfuclub.DbClass.Student.student_infoDaoImp;

/**
 *
 * @author Mithi
 */
public class Report extends javax.swing.JFrame {

    /**
     * Creates new form Report
     *
     */
    student_infoDao studentinfoDao = new student_infoDaoImp();
    parent_infoDao parentinfoDao = new parent_infoDaoImp();
    historyDao histryDao = new historyDaoImp();
    ProgressDao parentinfoDao1 = new ProgressDaoImp();
    attendanceDao attendDao = new attendanceDaoImp();

    public Report() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        rslt = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        t1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rslt.setEditable(false);
        jScrollPane1.setViewportView(rslt);

        jButton1.setText("Generate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Student ID");

        t1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(279, 279, 279))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(jLabel1)
                        .addGap(49, 49, 49)
                        .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void t1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int sid = Integer.parseInt(t1.getText());
        String str;
        StyledDocument doc = rslt.getStyledDocument();

        //Student
        student_info students = studentinfoDao.getStudent(sid);

        if (students != null) {
            str = "Id:" + students.getS_id()
                    + ", Name:" + students.getS_fname() + students.getS_lname()
                    + ", DOB:" + students.getS_dob()
                    + ", DOJ:" + students.getS_doj()
                    + ", email:" + students.getS_email()
                    + ", Status:" + students.getS_status()
                    + ", Mobile:" + students.getS_mobile() + "\n\n";
        } else {
            str = "No vaules found.\n";
        }
        try {
            doc.insertString(doc.getLength(), str, null);
            doc.insertString(doc.getLength(), "-------------------Parent Information------------------\n", null);
        } catch (BadLocationException e) {
            System.out.println(e);
        }

        //Parent
        List<parent_info> parnts;
        parnts = parentinfoDao.getUserparents(sid);

        if (parnts != null) {
            parnts.stream().map((student) -> "Parent Id:" + student.getP_id()
                    + ", Student ID " + student.getParentfk_s_sid()
                    + ", Name:" + student.getP_fname() + student.getP_lname()
                    + ", Relation" + student.getP_relation()
                    + ", email:" + student.getP_email()
                    + ", Mobile:" + student.getP_mobile() + "\n\n").forEachOrdered((str2) -> {

                try {
                    doc.insertString(doc.getLength(), str2, null);
                    doc.insertString(doc.getLength(), "------------------- History------------------\n", null);
                } catch (BadLocationException e) {
                    System.out.println(e);
                }
            });

        } else if (parnts.isEmpty()) {
            try {
                doc.insertString(doc.getLength(), "No Record is found\n", null);
                doc.insertString(doc.getLength(), "------------------- History------------------\n", null);
            } catch (BadLocationException e) {
                System.out.println(e);
            }
        }

        List<history> parnts1;
        parnts1 = histryDao.getUserHistory(sid);
        if (parnts1 != null) {
            parnts1.stream().map((students1)
                    -> " ID: " + students1.getId()
                    + ", Reason: " + students1.getReason()
                    + ", Paid:" + students1.getPaid()
                    + ", Paid Date: " + students1.getPaid_date()
                    + ", Student ID :" + students1.getHisfk_sid()
                    + "\n\n").forEachOrdered((str3) -> {
                try {
                    doc.insertString(doc.getLength(), str3, null);
                    doc.insertString(doc.getLength(), "------------------- Progress------------------\n", null);
                } catch (BadLocationException e) {
                    System.out.println(e);
                }
            });
        }
        if (parnts1.isEmpty()) {
            try {
                doc.insertString(doc.getLength(), "No Record is found\n", null);
                doc.insertString(doc.getLength(), "------------------- Progress------------------\n", null);
            } catch (BadLocationException e) {
                System.out.println(e);
            }

            List<Progress> parnts3;
            parnts3 = parentinfoDao1.getstudentProgress(sid);
            if (parnts3 != null) {
                parnts3.stream().map((students3)
                        -> "Id:" + students3.getId()
                        + ", Student ID: " + students3.getProgfk_sid()
                        + ", Rank ID:" + students3.getProgfk_rid()
                        + ", Date" + students3.getPr_date()
                        + "\n\n").forEachOrdered((str4) -> {
                    try {
                        doc.insertString(doc.getLength(), str4, null);
                        doc.insertString(doc.getLength(), "-------------------Attendance------------------\n", null);
                    } catch (BadLocationException e) {
                        System.out.println(e);
                    }
                });
            }
            if (parnts3.isEmpty()) {
                try {
                    doc.insertString(doc.getLength(), "No Record is found\n", null);
                    doc.insertString(doc.getLength(), "-------------------Attendance------------------\n", null);
                } catch (BadLocationException e) {
                    System.out.println(e);
                }
            }

            List<attendance> stud;
            String str7 = null;
            stud = attendDao.getAttendanceStudent(sid);

            if (stud != null) {
                stud.stream().map((s)
                        -> "Attendance Id:" + s.getId()
                        + ", Student ID " + s.getAttfk_s_id()
                        + ", Class ID " + s.getFk_c_id()
                        + "\n\n").forEachOrdered((str6) -> {
                    try {
                        doc.insertString(doc.getLength(), str6, null);
                        doc.insertString(doc.getLength(), "-------------------End------------------\n", null);
                    } catch (BadLocationException e) {
                        System.out.println(e);
                    }
                });
            }
            if (stud.isEmpty()) {
                str7 = "No vaules found\n.";
                try {
                    doc.insertString(doc.getLength(), str7, null);
                    doc.insertString(doc.getLength(), "-------------------End------------------\n", null);
                } catch (BadLocationException e) {
                    System.out.println(e);
                }

            }
    }//GEN-LAST:event_jButton1ActionPerformed
 }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Report().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane rslt;
    private javax.swing.JTextField t1;
    // End of variables declaration//GEN-END:variables
}
